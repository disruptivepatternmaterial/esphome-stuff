substitutions:
  # include the header file with the UART parsing logic 
  header_file: common/sensors/leapmmw_sensor.h

esphome:
  name: ${devicename}
  includes:
    - ${header_file}

uart:
  id: uart_bus
  tx_pin: ${uart_tx_pin}
  rx_pin: ${uart_rx_pin}
  baud_rate: 115200

## sensor definitions


sensor:      
  - platform: custom
    lambda: |-
      auto s = new leapmmw(id(uart_bus));
      App.register_component(s);
      return {};
    sensors:
      
switch:
  - platform: safe_mode
    name: Use Safe Mode

  - platform: template
    name: Led
    id: led  # do not change
    entity_category: config
    optimistic: true
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 2s
      - uart.write: "setLedMode 1 0"
      - delay: 3s
      - lambda: |-
          leapmmw(id(uart_bus)).getmmwConf("getLedMode 1");
      - delay: 2s 
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 2s
      - uart.write: "setLedMode 1 1"
      - delay: 3s
      - lambda: |-
          leapmmw(id(uart_bus)).getmmwConf("getLedMode 1");
      - delay: 2s
      - switch.turn_on: mmwave_sensor 

number:
  - platform: template
    name: Distance
    id: distance # do not change
    entity_category: config
    min_value: 0.15
    max_value: 9.45
    step: 0.15
    unit_of_measurement: M
    mode: box
    lambda: |-
      leapmmw(id(uart_bus)).getmmwConf("getRange");
      return {};
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 2s
      - uart.write: !lambda
          std::string range = "setRange 0 " + str_sprintf("%.2f", x);
          return std::vector<unsigned char>(range.begin(), range.end());
      - delay: 3s
      - switch.turn_on: mmwave_sensor 
      
  - platform: template
    name: Latency
    id: latency # do not change
    entity_category: config
    min_value: 1
    max_value: 600
    lambda: |-
      leapmmw(id(uart_bus)).getmmwConf("getLatency");
      return {};
    step: 1
    unit_of_measurement: s
    mode: box
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 2s
      - uart.write: !lambda
          std::string setL = "setLatency 0.1 " + str_sprintf("%.0f", x);
          return std::vector<unsigned char>(setL.begin(), setL.end());
      - delay: 3s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: Sensitivity
    id: sensitivity # do not change
    entity_category: config
    min_value: 0
    max_value: 9
    lambda: |-
      leapmmw(id(uart_bus)).getmmwConf("getSensitivity");
      return {};
    step: 1
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 2s
      - uart.write: !lambda
          std::string mss = "setSensitivity " + to_string((int)x);
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 3s
      - switch.turn_on: mmwave_sensor

button:
  - platform: restart
    name: Restart ESP
    entity_category: diagnostic
    on_press:
      - uart.write:
          id: uart_bus
          data: "resetSystem 0"

  - platform: template
    name: Factory Reset mmWave
    id: factory_reset_mmwMCU
    entity_category: diagnostic
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 2s
      - uart.write: "resetCfg"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
